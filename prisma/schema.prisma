// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String          @id @default(cuid())
    name             String?
    email            String?         @unique
    emailVerified    DateTime?
    image            String?
    isDeleted        Boolean         @default(false)
    accounts         Account[]
    sessions         Session[]
    sentRequests     FriendRequest[] @relation("requestFrom")
    receivedRequests FriendRequest[] @relation("requestTo")
    projects         Project[]
    ownProjects      Project[]       @relation("projectCreatedBy")
    tasks            Task[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model FriendRequest {
    id        String   @id @default(cuid())
    from      User     @relation(name: "requestFrom", fields: [fromId], references: [id])
    fromId    String
    to        User     @relation(name: "requestTo", fields: [toId], references: [id])
    toId      String
    status    String   @default("pending") // can be 'pending', 'accepted', or 'rejected'
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([fromId, toId])
}

model Project {
    id          String   @id @default(cuid())
    title       String
    description String?  @default("")
    createdBy   User     @relation("projectCreatedBy", fields: [createdById], references: [id])
    createdById String
    members     User[]
    tasks       Task[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique([id])
}

// // Define the Task model
model Task {
    id          String   @id @default(cuid())
    deadline    DateTime
    title       String
    description String?  @default("")
    assignedTo  User[]
    isPriority  Boolean  @default(false)
    status      String   @default("NOT_STARTED") // 

    Project   Project @relation(fields: [projectId], references: [id])
    projectId String
}

// // Define the Tag model

// // Define the Status enum
