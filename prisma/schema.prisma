generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Project {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    createdAt   DateTime @default(now())
    createdBy   String
    tasks       Task[]
    members     User[]   @relation("UserProject")
}

model Task {
    id          Int      @id @default(autoincrement())
    title       String
    description String?
    tags        String   @default("not started")
    deadline    DateTime
    createdAt   DateTime @default(now())
    createdBy   String
    assignedTo  User[]   @relation("UserTask")
    projectId   Int
    project     Project  @relation(fields: [projectId], references: [id])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[] @relation("UserProject")
    tasks         Task[]    @relation("UserTask")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
